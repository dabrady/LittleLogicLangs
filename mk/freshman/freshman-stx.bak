(module freshman-stx racket
  (require (for-syntax syntax/parse
                       "../lib/mk-stx.rkt"))
  (provide (for-syntax (all-from-out "../lib/mk-stx.rkt"))
           freshman-define)
  
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
  ; A wrapper for #define which ensures all function definitions are relations
  ; by dictating they begin with either a #fresh or a #conde.
  (define-syntax (freshman-define stx)
    (syntax-parse stx
      ; A literal.
      [(_ id:id (~or x:boolean x:str x:char x:number x:symbol x:goal-expr)) ; removed x:goal, to be added in a later language
       #'(define id x)]
      ; A >0 arg procedure that ends with -o and begins with #fresh or #conde.
      [(_ id:id rel:relation)
       #:fail-when (not (relation-id? (syntax-e #'id)))
                   (let ([id (syntax-e #'id)])
                     (format "relation identifier must end in -o, suggested change: ~a => ~ao"
                           id
                           id))
       #'(define id rel)]
      ; MIT notation support
      [(_ (id:id arg:id ...+) code:expr)
       (freshman-define id (lambda (arg ...+) code))]
      ; Anything else is invalid at this point.
;      [(_ id:id hukarz:expr)
;       #'(raise-user-error "invalid definition: must be either a literal or a valid relation")]
       ))
  
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
  ; Disable quasiquote syntax
  ;(read-accept-quasiquote #f)) ;; Removed for testing of student code, replace soon.
  )